#include "CvTestbed.h"
#include <fstream>
#include <string>
#include <sys/time.h>
#include <pthread.h>

struct pngImg {
  std::string name;
  IplImage frame;
};

void *writePNG(void *ptr) {
  struct pngImg *img = (pngImg *) ptr;

  cvSaveImage(img->name.c_str(),&(img->frame));
}

CvTestbed::CvTestbed() {
	cap=NULL;
	running=false;
	videocallback=NULL;
	keycallback=NULL;
	images.clear();
        record = false;
        recordDir = "";
        display = true;
        recordVideo = false;
        video = NULL;
	cmdKey = '0';
	cmdMode = 1;
	speed1 = 0;
	speed2 = 0;
}

CvTestbed::~CvTestbed() {
	for (size_t i=0; i<images.size(); i++) {
		if (images[i].release_at_exit) {
			cvReleaseImage(&(images[i].ipl));
		}
	}
	images.clear();
}

void CvTestbed::default_videocallback(IplImage *image,struct timeval* timestamp, bool dis) {
	// TODO: Skip frames if we are too slow? Impossible using OpenCV?
	/*
	static bool semaphore=false;
	if (semaphore) return;
	semaphore = true;
	*/

	if (CvTestbed::Instance().videocallback) {
		CvTestbed::Instance().videocallback(image, timestamp);
	}
        if(dis)
	  CvTestbed::Instance().ShowVisibleImages();

	//semaphore = false;
}

void CvTestbed::WaitKeys() {
	running=true;
	static bool pause = false;
        int num=0;
        std::ofstream file;
        std::string picname;
        std::string logName;
        std::stringstream logTime;
        struct timeval t;
        if(record) {
          if(recordDir.size() > 0) {
            logName = recordDir + "/timestamps.txt";
            file.open(logName.c_str());
            picname = recordDir + "/m";
          } else {
            gettimeofday(&t,NULL);
            logTime << t.tv_sec;
            logName = "timestamps_" + logTime.str() + ".txt";
            file.open(logName.c_str());
            picname = logTime.str() +"_";
          }
        } else if(recordVideo) {
          if(recordDir.size() > 0) {
            logName = recordDir + "/timestamps.txt";
            file.open(logName.c_str());
            picname = recordDir + "/video.avi";
          } else {
            gettimeofday(&t,NULL);
            logTime << t.tv_sec;
            logName = "timestamps_" + logTime.str() + ".txt";
            file.open(logName.c_str());
            picname = logTime.str() +"_video.avi";
          }
        } 
	while (running) {
		if (cap) {
			IplImage *frame = cap->captureImage(&t);
			if (frame) {
                                if(record) {
                                  if(file.is_open()){
                                    file << num << ","<< t.tv_sec << "." << std::setfill('0') << std::setw(6) << t.tv_usec << std::endl;
                                    std::stringstream snum;
                                    snum << std::setfill('0') << std::setw(9) << num;
                                    std::string pic = picname + snum.str() + ".png";
                                    cvSaveImage(pic.c_str(),frame);
/*
                                    pthread_t t;
                                    struct pngImg i; 
                                    i.name = pic;
                                    i.frame = *frame;
                                    pthread_create(&t,NULL,writePNG,(void*)&i);
*/
                                    num++;
                                  }
                                } else if(recordVideo) {
                                  if(video == NULL) {
                                    video = new cv::VideoWriter(picname,CV_FOURCC('D','I','V','X'),30.0,cv::Size(frame->width,frame->height),false );
                                    //video = new cv::VideoWriter(picname,CV_FOURCC('H','F','Y','U'),30.0,cv::Size(frame->width,frame->height),false ); //lossless
                                  }
                                  if(video->isOpened()) {
                                    file << num << ","<< t.tv_sec << "." << std::setfill('0') << std::setw(6) << t.tv_usec << std::endl;
                                    video->write(frame);
                                  }  else
                                    std::cout << "Can't open video" << std::endl;
                                }
				default_videocallback(frame,&t,display);
				if ((wintitle.size() > 0) && display) {
					cvShowImage(wintitle.c_str(), frame);
				}
			}
		}
		int key;
#ifdef WIN32
		if( (key = cvWaitKey(1)) >= 0 ) {
#else
		if( (key = cvWaitKey(1)) >= 0 ) {
#endif
			if (keycallback) {
				key = keycallback(key);
			}
			// If 'keycallback' didn't handle key - Use default handling
			// By default 'C' for calibration
			if (key == 'C') {
			    if (cap) {
                    cap->showSettingsDialog();
			    }
			}
			// By default '0'-'9' toggles visible images
			else if ((key >= '0') && (key <= '9')) {
				int index=key-'0';
				ToggleImageVisible(index);
			}
			else if(key == 'p') {
				pause = !pause;
			}
			else if (key > 0) {
				cmdKey = key;
                                std::cout << "CmdKey: " << cmdKey << std::endl;
				//record the motor speed that should result from the commandthis should match the logic on the arduino
				switch(key){case 'w':{
					//motor 1 forward
					speed1 = speed1 + 100;
					if(speed1 > 255){speed1=255;};
					break;
				}
					case 's':{
							 //motor 1 back
							 speed1 = speed1-100;
							 if(speed1<-255){speed1 = -255;};
							 break;
						 }
					case 'a':{
							 //motor 2 forward
							 speed2 = speed2+100;
							 if(speed2>255){speed2=255;}
							 break;
						 }
					case 'd':{
							 //motor 2 back
							 speed2 = speed2-100;
							 if(speed2<-255){speed2=-255;};
							 break;
						 }
					case 'z':{
							 //both motors forward
							 speed1 = 255;
							 speed2 = 255;
							 break;
						 }
					case 'x':{
							 //both motors backwards
							 speed1 = -255;
							 speed2 = -255;
							 break;
						 }
					case 'c':{
							 //both motors spinning in (motor 2 right motor spinning positive, motor 1 left motor spinning negative)
							 speed1 = -255;
							 speed2 = 255;
							 break;
						 }
					case 'v':{	
							 //both motors spinning out (motor 2 right motor spinning negative, motor 1 left motor spinning positive)
							 speed1 = 255;
							 speed2 = -255;
							 break;
						 }
					case 't':{
							 // t kills all motors
							 speed1 = 0;
							 speed2 = 0;
							 break;
						 }
      
   					 }
                                if (cmdKey == 'q'){
                                        running=false;
                                        std::cout << "quitting" << std::endl;
                                }

			}
			
		}
	}

        if(recordVideo) {
          video->release();
          delete video;
        }
}

void CvTestbed::ShowVisibleImages() {
	for (size_t i=0; i<images.size(); i++) {
		if (images[i].visible && display) {
			cvShowImage(images[i].title.c_str(), images[i].ipl);
		}
	}
}

CvTestbed& CvTestbed::Instance() {
	static CvTestbed obj;
	return obj;
}

void CvTestbed::SetVideoCallback(void (*_videocallback)(IplImage *image,struct timeval* timestamp)) {
	videocallback=_videocallback;
}

void CvTestbed::SetKeyCallback(int (*_keycallback)(int key)) {
	keycallback=_keycallback;
}

bool CvTestbed::StartVideo(Capture *_cap, const char *_wintitle) {
	bool clean=false;
    cap = _cap;
    if (cap == NULL) {
		CaptureFactory::CaptureDeviceVector vec = CaptureFactory::instance()->enumerateDevices();
		if (vec.size() < 1) return false;
		cap = CaptureFactory::instance()->createCapture(vec[0]);
		if (!cap->start()) {
			delete cap;
			return false;
		}
		clean=true;
	}
    if (_wintitle && display) {
        wintitle = _wintitle;
        cvNamedWindow(_wintitle, 1);
    }
	WaitKeys(); // Call the main loop
	if (clean) {
		cap->stop();
		delete cap;
	}
	return true;
}

size_t CvTestbed::SetImage(const char *title, IplImage *ipl, bool release_at_exit /* =false */) {
	size_t index = GetImageIndex(title);
	if (index == -1) {
		// If the title wasn't found create new
		Image i(ipl, title, false, release_at_exit);
		images.push_back(i);
		return (images.size()-1);
	}
	// If the title was found replace the image
	if (images[index].release_at_exit) {
		cvReleaseImage(&(images[index].ipl));
	}
	images[index].ipl = ipl;
	images[index].release_at_exit = release_at_exit;
	return index;
}

IplImage *CvTestbed::CreateImage(const char *title, CvSize size, int depth, int channels ) {
	IplImage *ipl=cvCreateImage(size, depth, channels);
	if (!ipl) return NULL;
	SetImage(title, ipl, true);
	return ipl;
}

IplImage *CvTestbed::CreateImageWithProto(const char *title, IplImage *proto, int depth /* =0 */, int channels /* =0 */) {
	if (depth == 0) depth = proto->depth;
	if (channels == 0) channels = proto->nChannels;
	IplImage *ipl= cvCreateImage(cvSize(proto->width, proto->height), depth, channels);
	if (!ipl) return NULL;
	ipl->origin = proto->origin;
	SetImage(title, ipl, true);
	return ipl;
}

IplImage *CvTestbed::GetImage(size_t index) {
	if (index < 0) return NULL;
	if (index >= images.size()) return NULL;
	return images[index].ipl;
}

size_t CvTestbed::GetImageIndex(const char *title) {
	std::string s(title);
	for (size_t i=0; i<images.size(); i++) {
		if (s.compare(images[i].title) == 0) {
			return i;
		}
	}
	return (size_t)-1;
}

IplImage *CvTestbed::GetImage(const char *title) {
	return GetImage(GetImageIndex(title));
}

bool CvTestbed::ToggleImageVisible(size_t index, int flags) {
	if (index >= images.size()) return false;
	if (images[index].visible == false) {
		images[index].visible=true;
		cvNamedWindow(images[index].title.c_str(), flags);
		return true;
	}
	else {
		images[index].visible=false;
		cvDestroyWindow(images[index].title.c_str());
		return false;
	}
}

void CvTestbed::RecordImages(bool rec) {
        record = rec;
}
void CvTestbed::RecordVideo(bool rec) {
        recordVideo = rec;
}

void CvTestbed::SetRecordDirectory(std::string dir) {
   recordDir = dir;
}

void CvTestbed::SetDisplay(bool dis) {
  display = dis;
}
